在Pandas中，你可以通过以下步骤实现你的需求：

1. 使用 `sort_values()` 对指定列进行升序排序
2. 添加新列，使用 `range(1, len(df)+1)` 生成从1开始的连续排名

### 示例代码：
```python
import pandas as pd

# 假设你的DataFrame名为df，要排序的列名为"target_column"
# 步骤1：按指定列升序排序
df_sorted = df.sort_values(by="target_column", ascending=True)

# 步骤2：添加排名列（从1开始）
df_sorted["rank"] = range(1, len(df_sorted) + 1

# 如果想保持原始行顺序，添加reset_index()
df_sorted = df_sorted.reset_index(drop=True)
```

### 示例说明：
假设原始数据：
```python
import pandas as pd

data = {
    "product": ["A", "B", "C", "D", "E"],
    "price": [30, 10, 20, 10, 40]
}
df = pd.DataFrame(data)
```

执行排序和排名：
```python
df_sorted = df.sort_values("price", ascending=True)
df_sorted["rank"] = range(1, len(df_sorted)+1)
```

结果DataFrame：
```
  product  price  rank
1       B     10     1
3       D     10     2
2       C     20     3
0       A     30     4
4       E     40     5
```

### 关键点说明：
1. `sort_values(by="column", ascending=True)` 确保按指定列升序排列
2. `range(1, len(df)+1)` 生成从1开始的连续整数排名
3. `reset_index(drop=True)` 会重置索引（可选操作）
4. 相同值处理：此方法会给相同值分配连续排名（如示例中的10元商品分别得1、2名）

如果需要处理相同值的排名（如并列排名），可以使用Pandas内置的`rank()`方法：
```python
df["rank"] = df["price"].rank(method="dense").astype(int)
```
但这会得到不同的排名结果（相同值同排名），请根据你的具体需求选择合适的方法。