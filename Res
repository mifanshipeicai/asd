要将Java List中具有相同键的Map合并成一个Map，并将对应的值连接起来，可以按照以下步骤实现：

1. **遍历所有Map中的键值对**：将每个键的值合并到一个临时Map中。
2. **生成结果列表**：将合并后的键值对转换为单独的Map，并存入结果列表。

以下是实现代码：

```java
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MapMerger {

    public static List<Map<String, String>> mergeMaps(List<Map<String, String>> list) {
        // 用于合并所有键值对的临时Map
        Map<String, String> mergedValues = new HashMap<>();

        // 遍历每个Map中的键值对，合并值
        for (Map<String, String> map : list) {
            for (Map.Entry<String, String> entry : map.entrySet()) {
                String key = entry.getKey();
                String value = entry.getValue();
                // 如果键已存在，则拼接值；否则直接添加
                mergedValues.merge(key, value, (oldVal, newVal) -> oldVal + newVal);
            }
        }

        // 将合并后的键值对转换为独立的Map并存入结果列表
        List<Map<String, String>> result = new ArrayList<>();
        for (Map.Entry<String, String> entry : mergedValues.entrySet()) {
            Map<String, String> newMap = new HashMap<>();
            newMap.put(entry.getKey(), entry.getValue());
            result.add(newMap);
        }

        return result;
    }

    public static void main(String[] args) {
        // 示例测试
        List<Map<String, String>> list = new ArrayList<>();
        
        Map<String, String> map1 = new HashMap<>();
        map1.put("a", "hello");
        list.add(map1);
        
        Map<String, String> map2 = new HashMap<>();
        map2.put("a", "world");
        list.add(map2);
        
        Map<String, String> map3 = new HashMap<>();
        map3.put("b", "test");
        list.add(map3);

        List<Map<String, String>> mergedList = mergeMaps(list);
        System.out.println(mergedList);  // 输出：[{a=helloworld}, {b=test}]
    }
}
```

### 解释：
- **合并过程**：使用`mergedValues`临时Map收集所有键的值。若键已存在，则通过`merge`方法将新值连接到旧值之后。
- **生成结果**：遍历临时Map，将每个键值对转换为新的Map，并添加到结果列表中。
- **示例结果**：输入三个Map（两个含键`a`，一个含键`b`），合并后得到两个Map（`a`的值合并，`b`保留）。

此方法确保所有相同键的值被合并，最终每个键对应一个独立的Map。