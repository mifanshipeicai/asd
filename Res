以下是为 AWS SDK v2 编写的单元测试示例，使用 **JUnit 5** 和 **Mockito** 模拟 `S3Client`：

### 步骤 1：添加测试依赖
在 `pom.xml` 中添加：
```xml
<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter-engine</artifactId>
    <version>5.8.2</version>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.mockito</groupId>
    <artifactId>mockito-core</artifactId>
    <version>4.5.1</version>
    <scope>test</scope>
</dependency>
```

---

### 步骤 2：编写单元测试
```java
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import software.amazon.awssdk.services.s3.S3Client;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Request;
import software.amazon.awssdk.services.s3.model.ListObjectsV2Response;
import software.amazon.awssdk.services.s3.model.S3Object;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class S3ServiceTest {

    @Mock
    private S3Client s3Client; // 模拟 S3 客户端

    @InjectMocks
    private S3Service s3Service; // 注入被测试的 Service

    private static final String BUCKET_NAME = "test-bucket";

    @Test
    void testListFilesInFolder_WithValidPath_ReturnsFiles() {
        // 模拟 S3 响应数据
        String folderPath = "images/2023/";
        List<S3Object> mockObjects = Arrays.asList(
                S3Object.builder().key(folderPath).build(), // 文件夹对象（需要被过滤）
                S3Object.builder().key(folderPath + "file1.jpg").build(),
                S3Object.builder().key(folderPath + "file2.jpg").build()
        );

        ListObjectsV2Response mockResponse = ListObjectsV2Response.builder()
                .contents(mockObjects)
                .build();

        // 配置 Mock 行为
        when(s3Client.listObjectsV2(any(ListObjectsV2Request.class)))
                .thenReturn(mockResponse);

        // 调用测试方法
        List<String> result = s3Service.listFilesInFolder(folderPath);

        // 验证结果
        assertEquals(2, result.size());
        assertTrue(result.contains("images/2023/file1.jpg"));
        assertTrue(result.contains("images/2023/file2.jpg"));
        assertFalse(result.contains(folderPath)); // 确保过滤文件夹对象
    }

    @Test
    void testListFilesInFolder_PathWithoutSlash_AppendsSlash() {
        // 模拟响应（空列表）
        ListObjectsV2Response mockResponse = ListObjectsV2Response.builder().build();
        when(s3Client.listObjectsV2(any(ListObjectsV2Request.class)))
                .thenReturn(mockResponse);

        // 调用方法（路径不带斜杠）
        s3Service.listFilesInFolder("images/2023");

        // 验证请求参数是否自动添加了斜杠
        ArgumentCaptor<ListObjectsV2Request> requestCaptor = 
            ArgumentCaptor.forClass(ListObjectsV2Request.class);
        verify(s3Client).listObjectsV2(requestCaptor.capture());

        ListObjectsV2Request capturedRequest = requestCaptor.getValue();
        assertEquals("images/2023/", capturedRequest.prefix());
    }

    @Test
    void testListFilesInFolder_EmptyPath_ReturnsRootFiles() {
        // 模拟根目录下的文件
        List<S3Object> mockObjects = Arrays.asList(
                S3Object.builder().key("file1.txt").build(),
                S3Object.builder().key("file2.txt").build()
        );

        ListObjectsV2Response mockResponse = ListObjectsV2Response.builder()
                .contents(mockObjects)
                .build();
        when(s3Client.listObjectsV2(any(ListObjectsV2Request.class)))
                .thenReturn(mockResponse);

        // 调用方法（空路径）
        List<String> result = s3Service.listFilesInFolder("");

        assertEquals(2, result.size());
        assertTrue(result.contains("file1.txt"));
    }
}
```

---

### 关键点说明
1. **模拟依赖项**  
   使用 `@Mock` 注解模拟 `S3Client`，通过 `@InjectMocks` 将模拟对象注入 `S3Service`。

2. **验证逻辑覆盖**  
   - **过滤文件夹对象**：确保路径末尾的文件夹对象（如 `images/2023/`）被排除。
   - **路径修正**：验证输入的路径自动添加斜杠（如 `images/2023` → `images/2023/`）。
   - **空路径处理**：测试根目录文件列表。

3. **参数捕获**  
   使用 `ArgumentCaptor` 捕获实际请求参数，验证 `prefix` 是否正确。

4. **边界条件**  
   可根据需要扩展测试案例，例如：
   - 分页处理（`continuationToken`）
   - 无效路径或无权限场景

---

### 运行测试
使用 Maven 命令运行测试：
```bash
mvn test
```

通过这种方式，你可以确保 S3 文件列表逻辑在隔离环境中正确工作，无需真实 AWS 连接。