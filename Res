在Java中删除包含多个文件且无子目录的文件夹，可以按照以下步骤实现：

1. **验证目标路径是否为有效目录**：确保目标存在且是一个目录。
2. **删除目录内所有文件**：遍历目录中的文件并逐个删除。
3. **删除空目录**：在确认所有文件删除后删除空目录。

以下是具体实现的代码：

```java
import java.io.File;
import java.io.IOException;

public class FolderDeleter {
    public static void deleteFolder(String folderPath) throws IOException {
        File folder = new File(folderPath);
        
        // 检查文件夹是否存在
        if (!folder.exists()) {
            throw new IOException("文件夹不存在: " + folderPath);
        }
        
        // 检查是否是目录
        if (!folder.isDirectory()) {
            throw new IOException("路径不是目录: " + folderPath);
        }
        
        // 获取目录下的所有文件
        File[] files = folder.listFiles();
        if (files == null) {
            throw new IOException("无法访问目录内容: " + folderPath);
        }
        
        // 删除所有文件
        for (File file : files) {
            if (!file.delete()) {
                throw new IOException("删除文件失败: " + file.getAbsolutePath());
            }
        }
        
        // 删除空目录
        if (!folder.delete()) {
            throw new IOException("删除目录失败: " + folderPath);
        }
    }

    public static void main(String[] args) {
        String targetFolder = "path/to/your/folder"; // 替换为目标文件夹路径
        try {
            deleteFolder(targetFolder);
            System.out.println("文件夹删除成功。");
        } catch (IOException e) {
            System.err.println("错误: " + e.getMessage());
        }
    }
}
```

**关键点说明**：

1. **异常处理**：方法通过抛出`IOException`明确错误原因（如权限不足、路径无效等）。
2. **安全性检查**：
   - 确认目标存在且为目录。
   - 处理`listFiles()`返回`null`的情况（如不可读的目录）。
3. **删除文件**：遍历所有文件并逐个删除，确保目录为空。
4. **删除目录**：最后删除已空的目录。

**注意事项**：
- **权限问题**：确保程序有权限删除目标文件及目录。
- **路径格式**：根据操作系统使用正确的路径分隔符（如Windows用`\`，Linux/macOS用`/`）。
- **并发操作**：删除过程中若有其他程序修改目录内容，可能导致删除失败，需根据需求处理。

此方法适用于删除无子目录的文件夹，高效且直接。对于包含子目录的情况，需递归处理，但根据题目要求此处无需考虑。