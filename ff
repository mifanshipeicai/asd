使用Pandas处理JSON时间数据并生成统计报告

以下是使用Pandas库实现的解决方案，它更简洁高效：

import pandas as pd
import json

def process_time_data_with_pandas(json_file_path, csv_file_path):
    """
    使用Pandas处理JSON时间数据并生成CSV文件和统计报告
    
    参数:
    json_file_path: JSON文件路径
    csv_file_path: 输出CSV文件路径
    """
    
    # 读取JSON文件
    try:
        df = pd.read_json(json_file_path)
    except FileNotFoundError:
        print(f"错误：找不到文件 {json_file_path}")
        return
    except ValueError as e:
        print(f"错误：JSON文件格式不正确 - {e}")
        return
    
    # 检查数据是否为空
    if df.empty:
        print("警告：JSON文件中没有数据")
        return
    
    # 检查必要的列是否存在
    required_columns = ['id', 'starttime', 'endtime']
    if not all(col in df.columns for col in required_columns):
        print("错误：JSON文件中缺少必要的列（id, starttime, endtime）")
        return
    
    # 计算时间花费
    df['time_spent'] = df['endtime'] - df['starttime']
    
    # 保存为CSV文件
    try:
        df.to_csv(csv_file_path, index=False)
        print(f"CSV文件已生成: {csv_file_path}")
    except Exception as e:
        print(f"错误：无法写入CSV文件 - {e}")
        return
    
    # 按ID分组计算总时间花费
    id_time_totals = df.groupby('id')['time_spent'].sum()
    
    # 计算最早和最晚时间花费
    min_time = df['time_spent'].min()
    max_time = df['time_spent'].max()
    
    # 输出统计结果
    print("\n=== 时间花费统计 ===")
    print("各ID总时间花费:")
    for item_id, total_time in id_time_totals.items():
        print(f"  ID {item_id}: {total_time} 秒")
    
    print(f"\n最早时间花费: {min_time} 秒")
    print(f"最晚时间花费: {max_time} 秒")
    
    # 创建统计DataFrame并保存
    stats_df = pd.DataFrame({
        'ID': id_time_totals.index,
        '总时间花费(秒)': id_time_totals.values
    })
    
    # 添加最早和最晚时间花费
    stats_df = pd.concat([
        stats_df,
        pd.DataFrame({
            'ID': ['最早时间花费', '最晚时间花费'],
            '总时间花费(秒)': [min_time, max_time]
        })
    ], ignore_index=True)
    
    # 保存统计报告
    stats_file = csv_file_path.replace('.csv', '_stats.csv')
    try:
        stats_df.to_csv(stats_file, index=False)
        print(f"\n统计报告已保存: {stats_file}")
    except Exception as e:
        print(f"警告：无法保存统计报告文件 - {e}")

# 使用示例
if __name__ == "__main__":
    # 请替换为你的JSON文件路径
    json_file_path = "data.json"
    
    # 输出CSV文件路径
    csv_file_path = "time_data.csv"
    
    # 处理数据
    process_time_data_with_pandas(json_file_path, csv_file_path)


更简洁的版本（如果你不需要详细的错误处理）

import pandas as pd

# 读取JSON文件
df = pd.read_json("data.json")

# 计算时间花费
df['time_spent'] = df['endtime'] - df['starttime']

# 保存为CSV
df.to_csv("time_data.csv", index=False)

# 按ID分组计算总时间花费
id_time_totals = df.groupby('id')['time_spent'].sum()

# 计算最早和最晚时间花费
min_time = df['time_spent'].min()
max_time = df['time_spent'].max()

# 输出结果
print("各ID总时间花费:")
print(id_time_totals)
print(f"\n最早时间花费: {min_time} 秒")
print(f"最晚时间花费: {max_time} 秒")


使用说明

1. 确保已安装pandas库：pip install pandas

2. 将上述代码保存为Python脚本

3. 修改文件路径为你的实际文件路径

4. 运行脚本

Pandas方法的优势

1. 代码简洁：使用Pandas可以大大减少代码量

2. 性能高效：Pandas针对大数据集进行了优化

3. 功能强大：内置的数据处理功能丰富

4. 易于扩展：可以轻松添加更多分析功能

注意事项

• 确保JSON文件格式正确，可以直接被Pandas读取

• 如果JSON文件是数组格式，Pandas可以直接读取

• 如果JSON文件是对象格式（包含嵌套结构），可能需要使用pd.json_normalize()进行处理

如果你的JSON结构比较复杂，或者需要更高级的时间处理功能（如转换时间格式），请提供更多细节，我可以进一步调整代码。