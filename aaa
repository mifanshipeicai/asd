是的，完全可以在 Filter 中配置全局跨域（CORS）。使用 Filter 的方式更加底层和灵活，特别适合需要精细控制跨域行为的情况。以下是完整的实现方案：

### 在 Filter 中配置全局跨域的步骤

#### 1. 创建 CORS Filter 类
```java
import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;

public class CorsFilter implements Filter {

    // 允许跨域的域名列表（用逗号分隔）
    private static final String ALLOWED_ORIGINS = "https://www.example.com,https://api.example.com,http://localhost:8080";
    
    // 允许的 HTTP 方法
    private static final String ALLOWED_METHODS = "GET, POST, PUT, DELETE, OPTIONS, PATCH";
    
    // 允许的请求头
    private static final String ALLOWED_HEADERS = "Authorization, Content-Type, X-Requested-With, Accept, Origin";
    
    // 暴露给前端的响应头
    private static final String EXPOSED_HEADERS = "Custom-Header, Authorization";
    
    // 是否允许携带凭证
    private static final boolean ALLOW_CREDENTIALS = true;
    
    // 预检请求缓存时间（秒）
    private static final long MAX_AGE = 3600;

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) 
            throws IOException, ServletException {
        
        HttpServletResponse response = (HttpServletResponse) res;
        HttpServletRequest request = (HttpServletRequest) req;

        // 获取请求来源
        String origin = request.getHeader("Origin");
        
        // 检查来源是否在允许列表中
        if (origin != null && isOriginAllowed(origin)) {
            response.setHeader("Access-Control-Allow-Origin", origin);
        }
        
        response.setHeader("Access-Control-Allow-Methods", ALLOWED_METHODS);
        response.setHeader("Access-Control-Allow-Headers", ALLOWED_HEADERS);
        response.setHeader("Access-Control-Expose-Headers", EXPOSED_HEADERS);
        response.setHeader("Access-Control-Max-Age", String.valueOf(MAX_AGE));
        response.setHeader("Access-Control-Allow-Credentials", String.valueOf(ALLOW_CREDENTIALS));

        // 处理预检请求（OPTIONS）
        if ("OPTIONS".equalsIgnoreCase(request.getMethod())) {
            response.setStatus(HttpServletResponse.SC_OK);
            return;  // 直接返回，不继续执行过滤器链
        }

        chain.doFilter(req, res);
    }

    // 检查来源是否在允许列表中
    private boolean isOriginAllowed(String origin) {
        String[] allowedOrigins = ALLOWED_ORIGINS.split(",");
        for (String allowedOrigin : allowedOrigins) {
            if (origin.trim().equals(allowedOrigin.trim())) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void init(FilterConfig filterConfig) {
        // 初始化逻辑（可选）
    }

    @Override
    public void destroy() {
        // 清理逻辑（可选）
    }
}
```

#### 2. 注册 Filter（Spring Boot 配置）
```java
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.Ordered;

@Configuration
public class FilterConfig {

    @Bean
    public FilterRegistrationBean<CorsFilter> corsFilter() {
        FilterRegistrationBean<CorsFilter> registrationBean = new FilterRegistrationBean<>();
        
        registrationBean.setFilter(new CorsFilter());
        registrationBean.addUrlPatterns("/*");  // 应用于所有URL
        
        // 设置最高优先级（确保最先执行）
        registrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);
        
        return registrationBean;
    }
}
```

### 关键配置说明

| 响应头                          | 说明                                                                 |
|--------------------------------|----------------------------------------------------------------------|
| `Access-Control-Allow-Origin`  | **必须** 指定允许访问的域名（不能使用 `*` 当允许凭证时）               |
| `Access-Control-Allow-Methods` | 允许的 HTTP 方法（GET, POST 等）                                     |
| `Access-Control-Allow-Headers` | 允许的请求头                                                         |
| `Access-Control-Expose-Headers`| 允许前端访问的响应头                                                 |
| `Access-Control-Max-Age`       | 预检请求缓存时间（减少 OPTIONS 请求）                                |
| `Access-Control-Allow-Credentials` | 是否允许携带 Cookie 等凭证（`true`/`false`）                     |

### 注意事项

1. **域名匹配逻辑**：
   - 示例中使用了精确匹配，可根据需求扩展为：
     ```java
     // 支持子域名匹配
     private boolean isOriginAllowed(String origin) {
         return Arrays.stream(ALLOWED_ORIGINS.split(","))
             .anyMatch(allowed -> origin.matches(allowed.trim().replace(".", "\\.") + "(:\\d+)?"));
     }
     ```

2. **OPTIONS 请求处理**：
   - 对于预检请求（OPTIONS），直接返回 200 状态码并终止请求链

3. **安全考虑**：
   - 生产环境避免使用 `*` 通配符
   - 敏感操作应验证 `Origin` 头合法性

4. **与 Spring Security 集成**：
   - 如果使用了 Spring Security，需确保在安全过滤器之前执行：
     ```java
     registrationBean.setOrder(Ordered.HIGHEST_PRECEDENCE);
     ```

### 与 MVC 配置方式的对比

| 特性 | Filter 方式 | MVC 配置方式 |
|------|-------------|--------------|
| **控制粒度** | 细粒度（可自定义逻辑） | 粗粒度（声明式配置） |
| **执行顺序** | 最早执行（可处理所有请求） | 在 Spring MVC 层处理 |
| **适用场景** | 非 Spring 管理的端点、静态资源 | Spring 控制器端点 |
| **复杂度** | 需要手动处理 OPTIONS 请求 | 自动处理 |
| **性能** | 轻微优势（更早拦截） | 标准 |
| **维护性** | 需要手动维护 | 配置更简洁 |

使用 Filter 配置跨域是通用性最强的解决方案，适用于所有 Servlet 应用（包括非 Spring 项目），并且可以精确控制跨域逻辑。