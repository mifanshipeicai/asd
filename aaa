在Spring Boot中整合DuckDB并自定义DataSource后，可以通过以下步骤实现项目启动时自动执行schema.sql创建表：

方案一：使用Spring Boot内置初始化机制（推荐）

1. 放置SQL文件

将schema.sql文件放在src/main/resources目录下

2. 配置application.properties

# 启用数据库初始化
spring.datasource.initialization-mode=always
# 指定初始化脚本（默认会加载schema.sql）
spring.datasource.schema=classpath:schema.sql


3. 配置自定义DataSource

确保你的自定义DataSource配置支持初始化：

@Bean
public DataSource dataSource() {
    return DataSourceBuilder.create()
        .type(DuckDBDataSource.class) // 你的DuckDB数据源类
        .url("jdbc:duckdb:mydb.db")
        .build();
}


方案二：编程式初始化（更灵活）

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.jdbc.datasource.init.DataSourceInitializer;
import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;
import javax.sql.DataSource;

@Configuration
public class DatabaseConfig {

    @Autowired
    private DataSource dataSource;

    @Bean
    public DataSourceInitializer dataSourceInitializer() {
        ResourceDatabasePopulator populator = new ResourceDatabasePopulator();
        populator.addScript(new ClassPathResource("schema.sql"));
        populator.setSeparator(";"); // DuckDB需要明确分隔符

        DataSourceInitializer initializer = new DataSourceInitializer();
        initializer.setDataSource(dataSource);
        initializer.setDatabasePopulator(populator);
        initializer.setEnabled(true); // 确保启用
        return initializer;
    }
}


方案三：使用JPA自动建表（需Hibernate支持）

# application.properties
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true


@Entity
public class User {
    @Id
    @GeneratedValue
    private Long id;
    private String name;
    // getters/setters
}


DuckDB注意事项

1. SQL语法兼容性

确保schema.sql使用DuckDB兼容语法：

CREATE TABLE users (
  id BIGINT PRIMARY KEY,
  name VARCHAR(255)
);


2. 多语句执行

在单个schema.sql中包含多个语句时，确保用分号分隔：

CREATE TABLE table1 (...);
CREATE TABLE table2 (...);


3. 文件路径处理

如果使用相对路径，DuckDB会在当前工作目录创建数据库文件：

spring.datasource.url=jdbc:duckdb:file:./mydb.db


验证是否生效

1. 查看启动日志中的SQL执行记录

2. 添加测试端点检查表是否存在：

@RestController
public class HealthController {
    
    @Autowired
    private JdbcTemplate jdbcTemplate;

    @GetMapping("/tables")
    public List<String> listTables() {
        return jdbcTemplate.queryForList(
            "SELECT table_name FROM information_schema.tables", 
            String.class
        );
    }
}


完整示例结构

src/main/resources/
├── application.properties
└── schema.sql

src/main/java/
└── com/example/
    ├── config/
    │   └── DataSourceConfig.java
    └── Application.java


选择最适合你项目需求的方式，通常方案一最简单直接，方案二提供更多控制权。对于DuckDB这种嵌入式数据库，初始化建表是确保应用正常启动的关键步骤。