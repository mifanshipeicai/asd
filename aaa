在Spring Boot中，可以通过以下步骤在启动时执行schema.sql文件创建数据库表：

方法一：使用Spring Boot自动执行SQL脚本（推荐）

1. 放置SQL文件

将schema.sql文件放在项目的src/main/resources目录下。

Spring Boot启动时会自动检测并执行该文件。

2. 配置数据源

在application.properties或application.yml中配置数据库连接：

spring.datasource.url=jdbc:mysql://localhost:3306/your_db
spring.datasource.username=root
spring.datasource.password=your_password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


3. 启用SQL初始化（Spring Boot 2.5+）

添加配置确保脚本执行：

spring.sql.init.mode=always  # 总是初始化
spring.sql.init.platform=mysql  # 指定数据库类型（可选）


4. 禁用Hibernate自动DDL（如果使用JPA）

避免与Hibernate的建表冲突：

spring.jpa.hibernate.ddl-auto=none



------

方法二：自定义DataSource初始化

1. 配置初始化模式

在application.properties中：

spring.datasource.initialization-mode=always


2. 指定自定义脚本路径（可选）

如果SQL文件不在默认位置：

spring.datasource.schema=classpath:custom/schema.sql



------

方法三：使用Spring JDBC手动执行

1. 创建DataSourceInitializer Bean：

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.jdbc.datasource.init.DataSourceInitializer;
import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;
import javax.sql.DataSource;

@Configuration
public class DatabaseConfig {
    
    @Autowired
    private DataSource dataSource;

    @Bean
    public DataSourceInitializer dataSourceInitializer() {
        ResourceDatabasePopulator populator = new ResourceDatabasePopulator();
        populator.addScript(new ClassPathResource("schema.sql")); // 添加SQL脚本
        
        DataSourceInitializer initializer = new DataSourceInitializer();
        initializer.setDataSource(dataSource);
        initializer.setDatabasePopulator(populator);
        return initializer;
    }
}



------

验证执行结果

启动应用时观察日志：

Executing SQL script from class path resource [schema.sql]


注意事项

1. 脚本幂等性

确保SQL语句可重复执行（例如使用CREATE TABLE IF NOT EXISTS）。

2. 执行顺序

schema.sql在data.sql之前执行（如果存在数据初始化）。

3. 多数据源

自定义初始化时需为每个数据源单独配置。

4. 生产环境

考虑使用专业迁移工具（如Flyway或Liquibase）替代。

完整示例schema.sql

CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS orders (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    total DECIMAL(10,2),
    FOREIGN KEY (user_id) REFERENCES users(id)
);


选择适合项目需求的方式即可实现启动时自动建表。