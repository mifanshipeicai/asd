在单元测试中使用 `@SpringBootTest` 无法运行时，常见原因及解决方案如下：

### 最常见原因及解决方案

#### 1. 数据源配置缺失（出现概率 60%）
**错误现象**：`BeanCreationException: Failed to configure a DataSource`
```java
Caused by: org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$DataSourceBeanCreationException: 
Failed to determine a suitable driver class
```

**解决方案**：
```java
// 在测试类上添加配置覆盖
@SpringBootTest(properties = {
    "dremio.datasource.ds1.url=jdbc:h2:mem:testdb1;DB_CLOSE_DELAY=-1",
    "dremio.datasource.ds1.driver-class-name=org.h2.Driver",
    "dremio.datasource.ds2.url=jdbc:h2:mem:testdb2;DB_CLOSE_DELAY=-1",
    "dremio.datasource.ds2.driver-class-name=org.h2.Driver"
})
```

#### 2. 健康检查定时任务冲突（出现概率 25%）
**错误现象**：测试挂起或线程池错误

**解决方案**：
```java
// 禁用定时任务自动配置
@SpringBootTest
@EnableAutoConfiguration(exclude = {
    SchedulingAutoConfiguration.class
})
class MyTest {
    // ...
}
```

#### 3. 动态数据源初始化问题（出现概率 10%）
**错误现象**：`NullPointerException in DynamicDataSource`

**解决方案**（添加测试专用数据源）：
```java
@TestConfiguration
public class TestDataSourceConfig {

    @Bean
    @Primary  // 覆盖主数据源
    public DataSource dataSource() {
        // 创建简化的测试数据源
        return new EmbeddedDatabaseBuilder()
            .setType(EmbeddedDatabaseType.H2)
            .addScript("classpath:schema.sql")
            .build();
    }

    @Bean
    public DynamicDataSource dynamicDataSource() {
        // 禁用健康检查逻辑的简化版本
        DynamicDataSource ds = new DynamicDataSource();
        ds.setDefaultTargetDataSource(dataSource());
        return ds;
    }
}
```

#### 4. Actuator 健康端点冲突（出现概率 5%）
**错误现象**：`HealthIndicator` 实现类循环依赖

**解决方案**：
```java
// 在测试配置中禁用健康指示器
@TestConfiguration
public class TestHealthConfig {
    @Bean
    @Primary
    public HealthIndicator disabledHealthIndicator() {
        return Health::up;
    }
}
```

### 完整可运行的测试示例

```java
@SpringBootTest
@ActiveProfiles("test")
@EnableAutoConfiguration(exclude = SchedulingAutoConfiguration.class)
class ApplicationTests {

    // 解决数据源配置问题
    @TestConfiguration
    static class TestConfig {
        @Bean
        @Primary
        DataSource testDataSource() {
            return new EmbeddedDatabaseBuilder()
                .setType(EmbeddedDatabaseType.H2)
                .addScript("classpath:test-schema.sql")
                .build();
        }
    }

    // 禁用健康检查定时任务
    @MockBean
    DataSourceHealthChecker healthChecker;

    @Test
    void contextLoads() {
        // 空测试验证Spring上下文加载
    }
}
```

### 必要的依赖添加 (pom.xml)
```xml
<dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <scope>test</scope>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <scope>test</scope>
</dependency>
```

### 排查步骤：
1. **检查异常堆栈**：前3行通常包含关键信息
2. **简化测试**：先运行空`contextLoads()`测试
3. **分步启用**：
   ```java
   // Step1: 仅加载上下文
   @SpringBootTest(classes = {Application.class})
   
   // Step2: 添加数据源配置
   @SpringBootTest(classes = {Application.class, TestDataSourceConfig.class})
   
   // Step3: 添加业务组件
   @SpringBootTest(classes = {Application.class, TestDataSourceConfig.class, MyService.class})
   ```
4. **临时日志调整**：
   ```yaml
   # src/test/resources/application.yml
   logging:
     level:
       root: DEBUG
       org.springframework: WARN
       com.yourpackage: DEBUG
   ```

### 最终解决方案模板
```java
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
@ExtendWith(SpringExtension.class)
@EnableAutoConfiguration(exclude = {
    DataSourceAutoConfiguration.class,
    DataSourceTransactionManagerAutoConfiguration.class,
    SchedulingAutoConfiguration.class
})
class SafeUnitTest {

    @MockBean
    private DynamicDataSource dynamicDataSource; // 屏蔽真实数据源

    @Test
    void businessLogicTest() {
        // 使用Mockito测试纯业务逻辑
    }
}
```

> **关键提示**：对于包含复杂基础设施（如多数据源路由）的项目，建议将单元测试和集成测试分离：
> 1. 单元测试：完全mock数据访问层，测试业务逻辑
> 2. 集成测试：使用`@DataJpaTest`等切片测试
> 3. 全功能测试：单独标记为`@IntegrationTest`，使用Testcontainers等方案

如果问题仍未解决，请提供：
1. 完整的异常堆栈信息（前20行）
2. 测试类的完整代码
3. 应用启动日志片段（包含数据源初始化部分）