使用JdbcTemplate防止SQL注入的核心是**严格使用参数化查询（PreparedStatement）**，避免直接拼接用户输入。以下是具体实践和注意事项：

---

### **1. 使用 `?` 占位符 + 参数传递**
**正确做法**：用 `?` 占位，通过`Object[]`或`PreparedStatementSetter`传递参数。
```java
String sql = "SELECT * FROM users WHERE username = ? AND password = ?";
jdbcTemplate.query(sql, new Object[]{userInputName, userInputPwd}, rowMapper);
```

**错误做法**（导致注入风险）：
```java
// 直接拼接用户输入！危险！
String sql = "SELECT * FROM users WHERE username = '" + userInput + "'";
jdbcTemplate.query(sql, rowMapper);
```

---

### **2. 使用命名参数（`NamedParameterJdbcTemplate`）**
更安全的替代方案，支持具名参数（如 `:paramName`）：
```java
NamedParameterJdbcTemplate namedTemplate = new NamedParameterJdbcTemplate(dataSource);

String sql = "SELECT * FROM users WHERE username = :name";
Map<String, Object> params = new HashMap<>();
params.put("name", userInputName);

namedTemplate.query(sql, params, rowMapper);
```

---

### **3. 避免动态表名/列名拼接**
若必须动态指定表名/列名（如 `ORDER BY`）：
- **白名单校验**：只允许预定义的合法值（如 `id`, `name`）。
```java
// 示例：校验列名是否合法
List<String> validColumns = Arrays.asList("id", "name", "email");
String orderBy = validColumns.contains(inputColumn) ? inputColumn : "id";

String sql = "SELECT * FROM users ORDER BY " + orderBy;
jdbcTemplate.query(sql, rowMapper); // 此时SQL是固定的
```

---

### **4. 禁止`String.format()`/`+`拼接SQL**
以下操作**极度危险**（JdbcTemplate无法提供保护）：
```java
// ❌ 全部有注入风险！
String sql1 = String.format("SELECT * FROM %s", userInputTable);
String sql2 = "DELETE FROM users WHERE id = " + userInputId;
jdbcTemplate.execute(sql1); // 相当于裸奔！
```

---

### **5. 特殊场景：`IN` 语句**
使用 `NamedParameterJdbcTemplate` 安全处理 `IN` 子句：
```java
String sql = "SELECT * FROM users WHERE id IN (:ids)";
Map<String, Object> params = new HashMap<>();
params.put("ids", Arrays.asList(1, 2, 3)); // 直接传List

namedTemplate.query(sql, params, rowMapper);
```

---

### **为什么JdbcTemplate能防注入？**
- **预编译机制**：底层使用`PreparedStatement`，用户输入会被视为数据而非SQL代码。
- **参数转义**：数据库驱动会自动对特殊字符（如 `'`、`;`）转义处理。
- **类型安全**：参数类型与占位符绑定，避免恶意构造类型破坏结构。

---

### **总结：安全准则**
| **场景**               | **安全做法**                                      | **风险做法**               |
|------------------------|-------------------------------------------------|--------------------------|
| 普通条件查询           | 使用 `?` 占位符 + `Object[]`/`PreparedStatementSetter` | 字符串拼接SQL             |
| 命名参数               | `NamedParameterJdbcTemplate` + `Map`             | 拼接命名参数              |
| 动态表名/列名          | 白名单校验                                        | 直接使用用户输入          |
| `IN` 语句              | 传 `List` 类型参数                                | 手动拼接 `(v1,v2,...)`   |

> 📌 **关键点**：**所有用户输入必须通过参数传递，而非嵌入SQL字符串**。JdbcTemplate本身是安全的，但错误使用（如拼接SQL）会绕过其保护机制。