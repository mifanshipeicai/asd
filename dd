在使用 Spring 的 JdbcTemplate 时，防止 SQL 注入的核心原则是始终使用参数化查询（Prepared Statements），而非字符串拼接。以下是具体实践和最佳方案：


------

1. 使用 ? 占位符 + 参数传递（基础方案）

String sql = "SELECT * FROM users WHERE username = ? AND password = ?"; // 用 ? 占位符

// 正确：传递参数（JdbcTemplate 自动转义）
jdbcTemplate.query(sql, new Object[]{username, password}, rowMapper);

// 更新操作示例
jdbcTemplate.update("UPDATE users SET status = ? WHERE id = ?", "ACTIVE", userId);


说明：

• JdbcTemplate 内部使用 PreparedStatement，所有参数会被安全处理。

• 禁止拼接 SQL："SELECT ... WHERE user = '" + name + "'" ❌（高风险！）


------

2. 命名参数（使用 NamedParameterJdbcTemplate）

更安全的进阶方案（避免参数顺序错误）：

@Autowired
private NamedParameterJdbcTemplate namedJdbcTemplate; // 注入命名参数模板

String sql = "SELECT * FROM users WHERE username = :user AND role = :role";

Map<String, Object> params = new HashMap<>();
params.put("user", username);
params.put("role", "admin");

List<User> users = namedJdbcTemplate.query(sql, params, rowMapper);


优势：

• 使用 :paramName 占位符，代码更清晰。

• 支持复杂参数（如 Map、对象）。


------

3. 避免 JdbcTemplate.queryForObject 的误区

当查询单值时：

// 错误示例（拼接字符串）❌
int count = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM table WHERE col=" + input, Integer.class);

// 正确示例 ✅
int count = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM table WHERE col=?", Integer.class, input);



------

4. 动态 SQL 的安全处理

需要动态条件时：

• 使用 WHERE 1=1 + AND 条件拼接（仍用参数化）：

StringBuilder sql = new StringBuilder("SELECT * FROM users WHERE 1=1");
Map<String, Object> params = new HashMap<>();

if (filterByName) {
    sql.append(" AND name = :name");
    params.put("name", name);
}
if (filterByRole) {
    sql.append(" AND role = :role");
    params.put("role", role);
}

namedJdbcTemplate.query(sql.toString(), params, rowMapper);


• 禁用：sql.append(" AND role = '" + role + "'") ❌（直接拼接危险！）


------

5. 框架层防护

• JPA / Hibernate：优先使用 JPQL 或 Criteria API（自动参数化）。

• MyBatis：用 #{param} 而非 ${param}（后者为文本替换，有注入风险）。


------

6. 防御深度补充

• 输入校验：对用户输入的 username、id 等做格式校验（如正则匹配）。

• 最小权限原则：数据库账户只赋予必要权限，禁用 DROP、DELETE 等高危操作。

• 日志监控：记录异常 SQL 请求。


------

总结：关键原则

安全做法	危险做法
使用 ? 或 :param	字符串拼接 SQL
通过 Object[] 传递参数	在 SQL 中嵌入用户输入
使用 NamedParameterJdbcTemplate	手动拼接 PreparedStatement

📌 终极准则：所有外部输入（用户/接口/文件）必须通过参数化传递到 SQL，永远不做 SQL 字符串拼接。JdbcTemplate 已内置防御机制，只要正确使用参数占位符即可避免注入风险。