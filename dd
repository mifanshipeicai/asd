处理JSON时间数据并生成统计报告

我可以帮你处理JSON数组文件，计算每个ID的时间花费，并生成CSV文件和统计报告。以下是完整的Python解决方案：

import json
import csv
from datetime import datetime

def process_time_data(json_file_path, csv_file_path):
    """
    处理JSON时间数据并生成CSV文件和统计报告
    
    参数:
    json_file_path: JSON文件路径
    csv_file_path: 输出CSV文件路径
    """
    
    # 读取JSON文件
    try:
        with open(json_file_path, 'r', encoding='utf-8') as file:
            data = json.load(file)
    except FileNotFoundError:
        print(f"错误：找不到文件 {json_file_path}")
        return
    except json.JSONDecodeError:
        print("错误：JSON文件格式不正确")
        return
    
    # 检查数据是否为空
    if not data:
        print("警告：JSON文件中没有数据")
        return
    
    # 处理每个项目，计算时间花费
    processed_data = []
    for item in data:
        try:
            # 提取数据并计算时间差（单位：秒）
            item_id = item['id']
            start_time = item['starttime']
            end_time = item['endtime']
            time_spent = end_time - start_time
            
            # 添加到处理后的数据列表
            processed_data.append({
                'id': item_id,
                'starttime': start_time,
                'endtime': end_time,
                'time_spent': time_spent
            })
        except KeyError as e:
            print(f"警告：缺少必要的键 {e}，跳过此项")
        except TypeError:
            print("警告：时间戳格式不正确，跳过此项")
    
    # 写入CSV文件
    try:
        with open(csv_file_path, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['id', 'starttime', 'endtime', 'time_spent']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            
            writer.writeheader()
            for item in processed_data:
                writer.writerow(item)
        
        print(f"CSV文件已生成: {csv_file_path}")
    except IOError:
        print(f"错误：无法写入文件 {csv_file_path}")
        return
    
    # 按ID分组计算总时间花费
    id_time_totals = {}
    for item in processed_data:
        item_id = item['id']
        time_spent = item['time_spent']
        
        if item_id in id_time_totals:
            id_time_totals[item_id] += time_spent
        else:
            id_time_totals[item_id] = time_spent
    
    # 计算最早和最晚时间花费
    if processed_data:
        all_times = [item['time_spent'] for item in processed_data]
        min_time = min(all_times)
        max_time = max(all_times)
        
        # 输出统计结果
        print("\n=== 时间花费统计 ===")
        print("各ID总时间花费:")
        for item_id, total_time in id_time_totals.items():
            print(f"  ID {item_id}: {total_time} 秒")
        
        print(f"\n最早时间花费: {min_time} 秒")
        print(f"最晚时间花费: {max_time} 秒")
        
        # 可选：将统计结果也保存到文件
        stats_file = csv_file_path.replace('.csv', '_stats.csv')
        try:
            with open(stats_file, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(['ID', '总时间花费(秒)'])
                for item_id, total_time in id_time_totals.items():
                    writer.writerow([item_id, total_time])
                writer.writerow([])
                writer.writerow(['最早时间花费(秒)', min_time])
                writer.writerow(['最晚时间花费(秒)', max_time])
            
            print(f"\n统计报告已保存: {stats_file}")
        except IOError:
            print(f"警告：无法保存统计报告文件 {stats_file}")
    else:
        print("警告：没有有效数据可统计")

# 使用示例
if __name__ == "__main__":
    # 请替换为你的JSON文件路径
    json_file_path = "data.json"
    
    # 输出CSV文件路径
    csv_file_path = "time_data.csv"
    
    # 处理数据
    process_time_data(json_file_path, csv_file_path)


使用说明

1. 将上述代码保存为Python脚本（如time_analysis.py）

2. 修改json_file_path变量为你的JSON文件路径

3. 运行脚本：python time_analysis.py

功能说明

这个脚本会：

1. 读取JSON文件并解析数据

2. 计算每个项目的时间花费（结束时间-开始时间）

3. 生成包含原始数据和时间花费的CSV文件

4. 计算并显示每个ID的总时间花费

5. 找出最早和最晚的时间花费

6. 生成一个额外的统计报告CSV文件

注意事项

• 确保JSON文件格式正确，每个项目包含id、starttime和endtime字段

• 时间戳应为数字类型（Unix时间戳）

• 脚本会处理可能的数据错误并跳过有问题的项目

如果你的JSON结构有所不同，或者需要不同的时间格式处理，请提供更多细节，我可以调整代码以适应你的具体需求。