在使用 Jackson 的 `SequenceWriter` 进行流式 JSON 写入时，**不需要手动关闭底层的 `OutputStream`**，但需要正确处理 `SequenceWriter` 和相关的资源。以下是关键注意事项和最佳实践：

### 1. 不需要手动关闭 Spring 提供的 `OutputStream`
Spring MVC 会自动管理响应流的生命周期：
```java
@GetMapping("/stream")
public StreamingResponseBody streamData() {
    return outputStream -> {
        // 不要关闭这个 outputStream！Spring 会处理
        ObjectMapper mapper = new ObjectMapper();
        JsonGenerator generator = mapper.getFactory().createGenerator(outputStream, JsonEncoding.UTF8);
        
        try (SequenceWriter writer = mapper.writer().writeValues(generator)) {
            // 写入数据
            for (Item item : itemList) {
                writer.write(item);  // 流式写入
            }
        } // 自动关闭 SequenceWriter 和 Generator
    };
}
```

### 2. 必须正确关闭 `SequenceWriter` 和 `JsonGenerator`
使用 **try-with-resources** 确保资源释放：
```java
try (SequenceWriter writer = mapper.writer().writeValues(generator)) {
    // 写入逻辑
    while (hasMoreData()) {
        writer.write(getNextData());
    }
} // 自动调用 writer.close()
```

### 3. 异常处理方案
当流写入过程中发生异常时：

#### 方案 A：写入结构化错误信息
```java
try (SequenceWriter writer = mapper.writer().writeValues(generator)) {
    // 业务逻辑
} catch (Exception e) {
    // 清空已缓冲但未发送的数据
    generator.flush();
    
    // 写入错误信息（保持JSON结构）
    generator.writeStartObject();
    generator.writeStringField("error", e.getMessage());
    generator.writeEndObject();
}
```

#### 方案 B：使用全局异常处理
```java
@ControllerAdvice
public class StreamExceptionHandler {

    @ExceptionHandler(DataAccessException.class)
    public ResponseEntity<String> handleStreamException(
            DataAccessException ex, 
            HttpServletResponse response) {
        
        if (!response.isCommitted()) {
            return ResponseEntity.status(500).body(ex.getMessage());
        }
        
        // 响应已提交时记录日志
        log.error("Stream failed after commit: {}", ex.getMessage());
        return null; // 响应已提交，无法修改
    }
}
```

### 4. 关键注意事项

#### 资源管理
```java
return outputStream -> {
    // 正确：使用 try-with-resources 管理 Jackson 资源
    try (JsonGenerator gen = mapper.createGenerator(outputStream);
         SequenceWriter writer = mapper.writer().writeValues(gen)) {
         
        // 业务逻辑
        
    } // 自动关闭 writer 和 generator
    
    // 不要关闭 outputStream！
};
```

#### 异常处理优先级
1. **前置验证**：在创建流之前检查参数
   ```java
   @GetMapping("/stream")
   public StreamingResponseBody stream(@RequestParam String id) {
       if (!isValid(id)) {
           throw new IllegalArgumentException("Invalid ID"); // 可被全局异常处理器捕获
       }
       
       return outputStream -> { /* 流逻辑 */ };
   }
   ```
   
2. **流内异常**：捕获并写入错误信息

### 5. 完整示例
```java
@GetMapping("/data-stream")
public StreamingResponseBody streamData() {
    return outputStream -> {
        ObjectMapper mapper = new ObjectMapper();
        
        try (JsonGenerator generator = mapper.getFactory().createGenerator(outputStream);
             SequenceWriter writer = mapper.writer().writeValues(generator)) {
            
            generator.writeStartArray();
            
            while (dataSource.hasNext()) {
                Data item = dataSource.next();
                // 业务逻辑可能抛出异常
                validateItem(item); 
                
                writer.write(item);
            }
            
            generator.writeEndArray();
            
        } catch (Exception e) {
            // 清空缓冲区
            outputStream.flush();
            
            // 写入错误结构
            String error = mapper.writeValueAsString(
                Map.of("error", e.getMessage(), "code", 500)
            );
            outputStream.write(error.getBytes());
        }
    };
}
```

### 总结建议
1. **使用 try-with-resources** 确保 `SequenceWriter` 和 `JsonGenerator` 被关闭
2. **绝不手动关闭** Spring 传入的 `OutputStream`
3. **双保险异常处理**：
   - 前置验证避免流内异常
   - 流内捕获异常并写入结构化错误
   - 全局异常处理器作为最后防线
4. **客户端兼容**：确保前端能处理混合了正常数据和错误信息的流

这样的设计既能保证资源安全释放，又能确保异常信息正确传达给调用方。