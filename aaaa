在Spring Boot中处理大文件时出现OOM问题，通常是由于内存中一次性加载过多数据导致的。以下是分步解决方案：

---

### **1. 流式处理（避免内存驻留）**
**问题**：一次性读取整个文件到内存会导致内存峰值。  
**解决**：使用`InputStream`逐块读取文件，边读边传输。

```java
public void processFile(File file) {
    try (InputStream is = new FileInputStream(file)) {
        byte[] buffer = new byte[4096]; // 4KB缓冲区
        int bytesRead;
        while ((bytesRead = is.read(buffer)) != -1) {
            sendChunkToApi(buffer, bytesRead); // 分块发送
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}
```

---

### **2. 使用非阻塞、流式HTTP客户端**
**问题**：传统HTTP客户端（如`RestTemplate`）可能缓冲整个请求体。  
**解决**：使用Spring WebClient支持流式传输。

```java
public Mono<Void> uploadFileStream(File file) {
    return WebClient.create()
        .post()
        .uri("https://third-party-api/data")
        .body(BodyInserters.fromResource(new FileSystemResource(file)))
        .retrieve()
        .bodyToMono(Void.class);
}
```

---

### **3. 控制并发处理数**
**问题**：同时处理多个大文件会导致内存叠加。  
**解决**：使用线程池限制并发数。

```java
private ExecutorService executor = Executors.newFixedThreadPool(4); // 最大4个并发

public void processAllFiles(List<File> files) {
    files.forEach(file -> 
        executor.submit(() -> processFile(file))
    );
}
```

---

### **4. 优化第三方接口调用**
**建议**：
- 如果第三方支持分块上传（如断点续传），按协议分块发送。
- 检查接口是否支持压缩（如gzip），减少传输体积。

---

### **5. 监控和调试**
- **启用GC日志**：观察内存回收情况。
  ```bash
  java -jar -XX:+PrintGCDetails -XX:+PrintGCDateStamps your-app.jar
  ```
- **分析堆内存**：使用工具（如VisualVM、Eclipse MAT）查找内存泄漏。

---

### **6. JVM调优（辅助手段）**
适当增加堆内存（但非根本解决）：
```bash
java -jar -Xms512m -Xmx2g your-app.jar
```

---

### **总结方案**
1. **流式读取文件**：分块处理，避免全量加载。
2. **流式HTTP传输**：使用WebClient或OkHttp发送流式请求。
3. **限制并发数**：通过线程池或信号量控制并行任务。
4. **资源管理**：确保所有`InputStream`和响应体被正确关闭。
5. **第三方适配**：尽量利用分块传输、压缩等特性。

通过以上步骤，能显著降低内存占用，避免OOM问题。