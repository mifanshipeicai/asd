在Spring MVC中配置全局跨域（CORS），允许指定域名跨域访问，可以通过以下步骤实现：

### 方案1：使用 `@CrossOrigin` 注解（不推荐全局）
虽然`@CrossOrigin`注解更适用于单个控制器，但完整方案会展示全局配置。

---

### 方案2：全局配置（推荐）
通过实现 `WebMvcConfigurer` 接口重写 `addCorsMappings` 方法。

#### 步骤：
1. **创建配置类**
    ```java
    import org.springframework.context.annotation.Configuration;
    import org.springframework.web.servlet.config.annotation.CorsRegistry;
    import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

    @Configuration
    public class CorsConfig implements WebMvcConfigurer {

        @Override
        public void addCorsMappings(CorsRegistry registry) {
            registry.addMapping("/**") // 所有接口
                    .allowedOrigins("https://www.example.com", "http://localhost:8080") // 指定允许的域名
                    .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS") // 允许的方法
                    .allowedHeaders("*") // 允许所有头
                    .allowCredentials(true) // 允许发送Cookie
                    .maxAge(3600); // 预检请求缓存时间（秒）
        }
    }
    ```

#### 关键参数说明：
| 方法 | 说明 |
|------|------|
| `.allowedOrigins("域1", "域2")` | 指定允许的域名（**必填**） |
| `.allowedMethods("GET", "POST", ...)` | 允许的HTTP方法 |
| `.allowedHeaders("*")` | 允许的请求头（`*`表示全部） |
| `.allowCredentials(true)` | 允许携带Cookie（若前端需传Cookie则设为true） |
| `.maxAge(3600)` | 预检请求有效期（减少OPTIONS请求次数） |

> **重要**：若设置了`.allowCredentials(true)`，则`allowedOrigins`**不能**使用`*`通配符，必须明确指定域名！

---

### 方案3：XML配置（传统项目适用）
在 `spring-mvc.xml` 中添加：
```xml
<mvc:cors>
    <mvc:mapping path="/**"
        allowed-origins="https://www.example.com, http://localhost:8080"
        allowed-methods="GET, POST, PUT, DELETE, OPTIONS"
        allowed-headers="*"
        allow-credentials="true"
        max-age="3600"/>
</mvc:cors>
```

---

### 常见问题排查：
1. **跨域不生效**：
   - 检查配置类是否被`@Configuration`标注且被扫描到。
   - 确认域名**无拼写错误**（包括`http/https`协议和端口）。
   - 若项目整合了Spring Security，需额外在安全配置中启用CORS（见下文）。

2. **Spring Security项目额外配置**：
   在安全配置类中添加：
   ```java
   @EnableWebSecurity
   public class SecurityConfig extends WebSecurityConfigurerAdapter {
       @Override
       protected void configure(HttpSecurity http) throws Exception {
           http.cors(); // 启用Spring Security的CORS支持
           // ...其他配置
       }
   }
   ```

3. **浏览器提示 `Credentials not supported`**：
   - 确保前端请求设置了 `withCredentials: true`（如Axios）。
   - 检查后端 `.allowCredentials(true)` 和 `allowedOrigins`（不能为`*`）。

---

### 完整示例（指定域名+允许Cookie）：
```java
@Configuration
public class CorsConfig implements WebMvcConfigurer {
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/api/**") // 只针对/api路径
                .allowedOrigins("https://trusted-domain.com")
                .allowedMethods("*")
                .allowedHeaders("Authorization", "Content-Type")
                .exposedHeaders("Custom-Header") // 允许前端获取的响应头
                .allowCredentials(true)
                .maxAge(4800);
    }
}
```

通过以上配置，Spring MVC将允许来自指定域名的跨域请求，并支持安全凭证传输。