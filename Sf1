@Component
public class SftpDownloader {

    private final Session session;
    private final String rootPath;

    @Autowired
    public SftpDownloader(Session session, @Value("${sftp.root-path}") String rootPath) {
        this.session = session;
        this.rootPath = rootPath;
    }

    public byte[] downloadFile(String remoteFilePath) throws IOException, JSchException, SftpException {
        ChannelSftp channel = null;
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            channel = (ChannelSftp) session.openChannel("sftp");
            channel.connect();
            channel.cd(rootPath);
            channel.get(remoteFilePath, outputStream);
            return outputStream.toByteArray();
        } finally {
            if (channel != null && channel.isConnected()) {
                channel.disconnect();
            }
        }
    }

    public void downloadToLocal(String remoteFilePath, String localFilePath) throws JSchException, SftpException, IOException {
        ChannelSftp channel = null;
        try {
            channel = (ChannelSftp) session.openChannel("sftp");
            channel.connect();
            channel.cd(rootPath);
            channel.get(remoteFilePath, localFilePath);
        } finally {
            if (channel != null && channel.isConnected()) {
                channel.import java.io.IOException;
import java.nio.file.*;
import java.util.Comparator;

public class DeleteDirectory {
    public static void deleteDirectory(Path path) throws IOException {
        if (Files.exists(path)) {
            Files.walk(path)
                .sorted(Comparator.reverseOrder())
                .forEach(file -> {
                    try {
                        Files.delete(file);
                    } catch (IOException e) {
                        System.err.println("删除失败: " + file + " - " + e.getMessage());
                    }
                });
        }
    }

    public static void main(String[] args) {
        Path dir = Paths.get("要删除的目录路径");
        try {
            deleteDirectory(dir);
            System.out.println("目录已成功删除！");
        } catch (IOException e) {
            System.err.println("错误: " + e.import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import java.io.IOException;
import java.nio.file.*;

import static org.junit.jupiter.api.Assertions.*;

class DeleteDirectoryTest {

    @Test
    void testDeleteNonEmptyDirectory(@TempDir Path tempDir) throws IOException {
        // 创建测试目录结构
        Path subDir = Files.createDirectory(tempDir.resolve("subdir"));
        Files.write(tempDir.resolve("file1.txt"), "test".getBytes());
        Files.write(subDir.resolve("file2.txt"), "test".getBytes());

        // 执行删除
        DeleteDirectory.deleteDirectory(tempDir);

        // 验证目录已删除
        assertFalse(Files.exists(tempDir), "目录应被成功删除");
    }

    @Test
    void testDeleteEmptyDirectory(@TempDir Path tempDir) throws IOException {
        DeleteDirectory.deleteDirectory(tempDir);
        assertFalse(Files.exists(tempDir), "空目录应被删除");
    }

    @Test
    void testDeleteNonExistentDirectory() {
        Path nonExistentDir = Paths.get("non_existent_directory");
        
        // 验证不会抛出异常
        assertDoesNotThrow(() -> DeleteDirectory.deleteDirectory(nonExistentDir));
    }

    @Test
    void testDeleteReadOnlyFile(@TempDir Path tempDir) throws IOException {
        Path readOnlyFile = Files.createFile(tempDir.resolve("readonly.txt"));
        readOnlyFile.toFile().setReadOnly(); // 设置文件为只读

        // 执行删除（可能需要处理权限问题）
        assertThrows(IOException.class, () -> DeleteDirectory.deleteDirectory(tempDir));

        // 清理（确保测试后恢复权限）
        readOnlyFile.toFile().setWritable(true);
    }
}






