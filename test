在 Spring Boot 中集成 Spring JDBC 实现多 Dremio 数据源的负载均衡和健康检查，可以通过以下方案实现：

### 1. 添加依赖
```xml
<dependencies>
    <!-- Spring JDBC -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-jdbc</artifactId>
    </dependency>
    
    <!-- Dremio JDBC 驱动 -->
    <dependency>
        <groupId>com.dremio</groupId>
        <artifactId>dremio-jdbc-driver</artifactId>
        <version>24.0.0</version> <!-- 使用实际版本 -->
    </dependency>
    
    <!-- 健康检查 -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
</dependencies>
```

### 2. 配置文件 (`application.yml`)
```yaml
app:
  datasources:
    dremio:
      ds1:
        url: jdbc:dremio:direct=host1:31010;schema=my_schema
        username: user1
        password: pass1
      ds2:
        url: jdbc:dremio:direct=host2:31010;schema=my_schema
        username: user2
        password: pass2

# Actuator 健康检查端点
management:
  endpoint:
    health:
      show-details: always
```

### 3. 核心实现类

#### 3.1 数据源配置类
```java
@Configuration
public class DremioDataSourceConfig {

    @Bean
    @ConfigurationProperties("app.datasources.dremio.ds1")
    public DataSource dremioDataSource1() {
        return DataSourceBuilder.create().build();
    }

    @Bean
    @ConfigurationProperties("app.datasources.dremio.ds2")
    public DataSource dremioDataSource2() {
        return DataSourceBuilder.create().build();
    }

    @Bean
    public LoadBalancedDataSource loadBalancedDataSource(
            @Qualifier("dremioDataSource1") DataSource ds1,
            @Qualifier("dremioDataSource2") DataSource ds2) {
        
        Map<Object, Object> targetDataSources = new HashMap<>();
        targetDataSources.put("ds1", ds1);
        targetDataSources.put("ds2", ds2);
        
        LoadBalancedDataSource routingDataSource = new LoadBalancedDataSource();
        routingDataSource.setTargetDataSources(targetDataSources);
        routingDataSource.setDefaultTargetDataSource(ds1); // 默认数据源
        
        return routingDataSource;
    }

    @Bean
    public JdbcTemplate jdbcTemplate(@Qualifier("loadBalancedDataSource") DataSource dataSource) {
        return new JdbcTemplate(dataSource);
    }
}
```

#### 3.2 负载均衡数据源路由
```java
public class LoadBalancedDataSource extends AbstractRoutingDataSource {

    private final AtomicInteger counter = new AtomicInteger(0);
    private final Map<Object, DataSource> dataSourceMap = new ConcurrentHashMap<>();
    private final Map<String, Boolean> healthStatus = new ConcurrentHashMap<>();

    @Override
    public void setTargetDataSources(Map<Object, Object> targetDataSources) {
        super.setTargetDataSources(targetDataSources);
        dataSourceMap.clear();
        targetDataSources.forEach((key, value) -> {
            dataSourceMap.put(key, (DataSource) value);
            healthStatus.put(key.toString(), true); // 初始状态健康
        });
    }

    @Override
    protected Object determineCurrentLookupKey() {
        List<String> activeKeys = healthStatus.entrySet().stream()
                .filter(Map.Entry::getValue)
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());

        if (activeKeys.isEmpty()) {
            throw new IllegalStateException("No available Dremio data sources");
        }

        int index = counter.getAndIncrement() % activeKeys.size();
        return activeKeys.get(index);
    }

    // 更新健康状态
    public void updateHealthStatus(String dataSourceKey, boolean isHealthy) {
        healthStatus.put(dataSourceKey, isHealthy);
    }

    // 获取所有数据源状态
    public Map<String, Boolean> getHealthStatus() {
        return new HashMap<>(healthStatus);
    }
}
```

#### 3.3 健康检查定时任务
```java
@Component
@RequiredArgsConstructor
public class DataSourceHealthChecker {

    private final LoadBalancedDataSource routingDataSource;
    private final Map<String, DataSource> dataSourceMap;

    @PostConstruct
    public void init() {
        dataSourceMap = routingDataSource.getDataSourceMap(); // 从路由数据源获取所有DS
    }

    @Scheduled(fixedDelay = 5000) // 每5秒检查一次
    public void checkDataSources() {
        dataSourceMap.forEach((key, dataSource) -> {
            boolean isHealthy = checkConnection(dataSource);
            routingDataSource.updateHealthStatus(key, isHealthy);
        });
    }

    private boolean checkConnection(DataSource dataSource) {
        try (Connection conn = dataSource.getConnection();
             Statement stmt = conn.createStatement()) {
            stmt.execute("SELECT 1"); // 简单查询验证连接
            return true;
        } catch (SQLException e) {
            return false;
        }
    }
}
```

#### 3.4 集成 Actuator 健康检查
```java
@Component
public class DremioHealthIndicator implements HealthIndicator {

    private final LoadBalancedDataSource routingDataSource;

    public DremioHealthIndicator(LoadBalancedDataSource routingDataSource) {
        this.routingDataSource = routingDataSource;
    }

    @Override
    public Health health() {
        Map<String, Boolean> status = routingDataSource.getHealthStatus();
        boolean allHealthy = status.values().stream().allMatch(Boolean::valueOf);
        
        Health.Builder builder = allHealthy ? 
                Health.up() : Health.down();
        
        status.forEach((key, healthy) -> 
            builder.withDetail(key, healthy ? "UP" : "DOWN")
        );
        
        return builder.build();
    }
}
```

### 4. 使用示例
```java
@RestController
@RequiredArgsConstructor
public class DemoController {

    private final JdbcTemplate jdbcTemplate;

    @GetMapping("/query")
    public List<Map<String, Object>> queryData() {
        return jdbcTemplate.queryForList("SELECT * FROM my_table");
    }
}
```

### 方案说明

1. **负载均衡机制**：
   - 轮询算法通过 `AtomicInteger` 计数器实现
   - 只路由到标记为健康状态的数据源
   - 自动跳过不可用节点

2. **健康检查**：
   - 定时任务每5秒执行一次 `SELECT 1` 验证
   - 动态更新路由状态
   - 通过 `/actuator/health` 端点可视化状态

3. **故障转移**：
   - 当数据源不可用时自动从路由池移除
   - 恢复后自动重新加入路由池
   - 所有数据源宕机时抛出明确异常

4. **扩展性**：
   - 轻松添加更多数据源（只需修改配置）
   - 支持自定义负载均衡策略
   - 可集成更复杂的健康检查逻辑

### 注意事项

1. Dremio JDBC URL 格式：
   ```java
   jdbc:dremio:direct=host:port;schema=your_schema
   ```

2. 建议在配置中增加连接池参数：
   ```yaml
   app.datasources.dremio.ds1:
     hikari:
       connection-timeout: 3000
       max-lifetime: 600000
   ```

3. 生产环境建议：
   - 增加健康检查失败阈值（避免瞬时故障误判）
   - 添加熔断机制（如 Resilience4j）
   - 实现更复杂的负载均衡算法（如加权轮您提出了一个重要的点：当有多个数据源时，即使其中一个不可用，只要还有其他可用数据源，整体服务健康状态应该标记为 UP。让我修改方案来实现这个需求：

### 修改健康指示器 (DremioHealthIndicator)
```java
@Component
public class DremioHealthIndicator implements HealthIndicator {

    private final LoadBalancedDataSource routingDataSource;

    public DremioHealthIndicator(LoadBalancedDataSource routingDataSource) {
        this.routingDataSource = routingDataSource;
    }

    @Override
    public Health health() {
        Map<String, Boolean> status = routingDataSource.getHealthStatus();
        
        // 计算健康状态：只要有一个可用就是 UP
        boolean anyHealthy = status.values().stream().anyMatch(Boolean::valueOf);
        Health.Builder builder = anyHealthy ? Health.up() : Health.down();
        
        // 添加每个数据源的详细状态
        status.forEach((key, healthy) -> 
            builder.withDetail("dremio." + key, healthy ? "UP" : "DOWN")
        );
        
        // 添加整体可用数据源计数
        long healthyCount = status.values().stream().filter(Boolean::valueOf).count();
        builder.withDetail("availableDataSources", healthyCount + "/" + status.size());
        
        return builder.build();
    }
}
```

### 修改负载均衡数据源路由 (LoadBalancedDataSource)
添加一个方法来检查是否有任何可用的数据源：
```java
public class LoadBalancedDataSource extends AbstractRoutingDataSource {

    // ... [其他代码保持不变] ...

    // 新增方法：检查是否有可用的数据源
    public boolean hasAvailableDataSource() {
        return healthStatus.values().stream().anyMatch(Boolean::valueOf);
    }
}
```

### 修改控制器使用前检查可用性
```java
@RestController
@RequiredArgsConstructor
public class DemoController {

    private final JdbcTemplate jdbcTemplate;
    private final LoadBalancedDataSource routingDataSource;

    @GetMapping("/query")
    public ResponseEntity<?> queryData() {
        // 检查是否有可用数据源
        if (!routingDataSource.hasAvailableDataSource()) {
            return ResponseEntity.status(HttpStatus.SERVICE_UNAVAILABLE)
                    .body("All Dremio data sources are unavailable");
        }
        
        try {
            List<Map<String, Object>> result = jdbcTemplate.queryForList("SELECT * FROM my_table");
            return ResponseEntity.ok(result);
        } catch (DataAccessException ex) {
            // 处理数据库异常
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("Database error: " + ex.getMessage());
        }
    }
}
```

### 修改健康检查端点配置 (application.yml)
```yaml
management:
  endpoint:
    health:
      show-details: always
      group:
        custom:
          include: dremioHealth # 使用自定义健康指示器
  health:
    status:
      # 自定义状态映射：只要有可用数据源就返回UP
      order: "DOWN, OUT_OF_SERVICE, UP"
      http-mapping:
        DOWN: 503
        OUT_OF_SERVICE: 503
        UP: 200
```

### 添加自定义健康组
```java
@Configuration
public class HealthConfig {
    
    @Bean
    public HealthContributorRegistryCustomizer healthContributorRegistryCustomizer(
            DremioHealthIndicator dremioHealthIndicator) {
        
        return registry -> {
            // 注册自定义健康组
            registry.registerContributor("dremioHealth", 
                (HealthContributor) () -> dremioHealthIndicator.health());
        };
    }
}
```

### 健康检查端点行为说明

现在健康检查端点会有以下行为：

1. **当至少一个数据源可用时**：
   ```json
   {
     "status": "UP",
     "components": {
       "dremioHealth": {
         "status": "UP",
         "details": {
           "dremio.ds1": "UP",
           "dremio.ds2": "DOWN",
           "availableDataSources": "1/2"
         }
       }
     }
   }
   ```

2. **当所有数据源都不可用时**：
   ```json
   {
     "status": "DOWN",
     "components": {
       "dremioHealth": {
         "status": "DOWN",
         "details": {
           "dremio.ds1": "DOWN",
           "dremio.ds2": "DOWN",
           "availableDataSources": "0/2"
         }
       }
     }
   }
   ```

### 方案优化说明

1. **健康状态逻辑**：
   - 只要有一个数据源可用，整体状态就是 `UP`
   - 所有数据源都不可用时才标记为 `DOWN`
   - 提供详细的每个数据源状态和可用计数

2. **API 响应增强**：
   - 在查询前检查数据源可用性
   - 返回明确的错误信息
   - 使用正确的 HTTP 状态码 (503 服务不可用)

3. **健康端点定制**：
   - 创建独立的自定义健康组 (`dremioHealth`)
   - 自定义状态映射规则
   - 提供清晰的可用数据源计数

4. **故障恢复机制**：
   - 健康检查定时任务会持续监控
   - 当数据源恢复时，自动重新加入负载均衡池
   - 无需重启应用即可恢复

这个方案确保：
- 当有可用数据源时，健康状态为 UP
- 即使部分数据源故障，服务仍然可用
- 提供详细的状态信息用于监控
- API 在无可用数据源时返回明确的错误





此方案实现了动态负载均衡和自动故障转移，同时通过 Spring Actuator 提供监控接口，满足生产环境高可用要求。