在Spring Boot中，使用JdbcTemplate查询数据并返回CSV压缩为ZIP文件的步骤如下：

### 实现步骤
1. **添加依赖**：使用OpenCSV处理CSV生成。
   ```xml
   <dependency>
       <groupId>com.opencsv</groupId>
       <artifactId>opencsv</artifactId>
       <version>5.7.1</version>
   </dependency>
   ```

2. **编写Controller方法**：
   ```java
   import com.opencsv.CSVWriter;
   import org.springframework.core.io.ByteArrayResource;
   import org.springframework.core.io.Resource;
   import org.springframework.http.HttpHeaders;
   import org.springframework.http.MediaType;
   import org.springframework.http.ResponseEntity;
   import org.springframework.jdbc.core.JdbcTemplate;
   import org.springframework.web.bind.annotation.GetMapping;
   import org.springframework.web.bind.annotation.RestController;
   
   import java.io.ByteArrayOutputStream;
   import java.io.IOException;
   import java.io.OutputStreamWriter;
   import java.nio.charset.StandardCharsets;
   import java.util.List;
   import java.util.Map;
   import java.util.zip.ZipEntry;
   import java.util.zip.ZipOutputStream;
   
   @RestController
   public class ExportController {
   
       private final JdbcTemplate jdbcTemplate;
   
       public ExportController(JdbcTemplate jdbcTemplate) {
           this.jdbcTemplate = jdbcTemplate;
       }
   
       @GetMapping("/export")
       public ResponseEntity<Resource> exportToZip() throws IOException {
           // 查询数据
           List<Map<String, Object>> data = jdbcTemplate.queryForList("SELECT * FROM your_table");
   
           // 创建字节数组输出流用于ZIP
           ByteArrayOutputStream baos = new ByteArrayOutputStream();
           try (ZipOutputStream zos = new ZipOutputStream(baos);
                OutputStreamWriter osw = new OutputStreamWriter(zos, StandardCharsets.UTF_8);
                CSVWriter csvWriter = new CSVWriter(osw)) {
   
               // 创建ZIP条目（CSV文件）
               zos.putNextEntry(new ZipEntry("data.csv"));
   
               // 写入CSV表头
               if (!data.isEmpty()) {
                   String[] headers = data.get(0).keySet().toArray(new String[0]);
                   csvWriter.writeNext(headers);
               }
   
               // 写入数据行
               for (Map<String, Object> row : data) {
                   String[] values = row.values().stream()
                           .map(this::convertToString)
                           .toArray(String[]::new);
                   csvWriter.writeNext(values);
               }
   
               // 关闭当前ZIP条目
               zos.closeEntry();
           }
   
           // 构建Resource并设置响应头
           ByteArrayResource resource = new ByteArrayResource(baos.toByteArray());
           return ResponseEntity.ok()
                   .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"data.zip\"")
                   .contentType(MediaType.APPLICATION_OCTET_STREAM)
                   .body(resource);
       }
   
       // 处理不同类型的数据转换为字符串
       private String convertToString(Object value) {
           if (value == null) {
               return "";
           } else if (value instanceof java.util.Date) {
               return new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format((java.util.Date) value);
           } else {
               return value.toString();
           }
       }
   }
   ```

### 关键点说明
- **流处理**：使用`ByteArrayOutputStream`和`ZipOutputStream`在内存中生成ZIP文件，避免临时文件。
- **编码**：指定UTF-8编码确保特殊字符正确处理。
- **CSV格式**：通过OpenCSV自动处理字段中的逗号、换行符等转义。
- **资源释放**：使用try-with-resources确保所有流正确关闭。
- **响应头设置**：`Content-Disposition`触发浏览器下载，`application/octet-stream`作为通用的二进制流类型。

### 测试建议
- 访问`/export`端点，确认返回ZIP文件。
- 解压ZIP检查CSV内容，验证数据和格式正确性。
- 测试包含特殊字符、日期和空值的数据行。